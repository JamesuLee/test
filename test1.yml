Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.0.0.0/16
     Tags:
        - Key: Name
          Value: My-VPC

  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My-IGW

  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC

  MyPublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: My-Public-SN-1

  MyPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: My-Public-SN-2

  MyPublicSN1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRT
      SubnetId: !Ref MyPublicSN1

  MyPublicSN2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRT
      SubnetId: !Ref MyPublicSN2

  MyPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: My-Public-RT

  MyPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref MyPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW

  WEBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: WEB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
        
  EIP1:
    Type: AWS::EC2::EIP
    
  EIP1Association:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC21
      EIP: !Ref EIP1
    
  EIP2:
    Type: AWS::EC2::EIP
    
  EIP2Association:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC22
      EIP: !Ref EIP2
      
  EC21:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-084e92d3e117f7692
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSN1
          GroupSet:
          - !Ref WEBSG
          AssociatePublicIpAddress: true
      
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname ELB-EC2-1
            yum install httpd -y
            echo "<h1>EC2-1 Web Server</h1>" > /var/www/html/dev/index.html
            
      

  EC22:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-084e92d3e117f7692
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSN2
          GroupSet:
          - !Ref WEB-SG
          
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>EC2-2 Web Server</h1>" > /var/www/html/mgt/index.html

    ALBTG:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ALB-TG
        Port: 80
        Protocol: HTTP
        VpcId: !Ref MyVPC
        Targets:
          - Id: !Ref EC21
            Port: 80
          - Id: !Ref EC22
            Port: 80
            
    ALBTGDev:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ALB-TG-Dev
        Port: 80
        Protocol: HTTP
        VpcId: !Ref MyVPC
        Targets:
          - Id: !Ref EC21
            Port: 80

    ALBTGMgt:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ALB-TG-Mgt
        Port: 80
        Protocol: HTTP
        VpcId: !Ref MyVPC
        Targets:
          - Id: !Ref EC22
            Port: 80  
            
    MyALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: My-ALB
        Scheme: internet-facing
        SecurityGroups:
          - !Ref MySG
        Subnets:
          - !Ref MyPublicSN1
          - !Ref MyPublicSN2
          
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ALBTG
        LoadBalancerArn: !Ref MyALB
        Port: 80
        Protocol: HTTP
      
    ALBListenerRule1:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref ALBTGDev
        Conditions:
          - Field: path-pattern
            Values:
              - /dev/*
        ListenerArn: !Ref ALBListener
        Priority: 1
      
    ALBListenerRule2:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref ALBTGMgt
        Conditions:
          - Field: path-pattern
            Values:
              - /mgt/*
        ListenerArn: !Ref ALBListener
        Priority: 2